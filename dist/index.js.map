{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://javascript-action/../../../../../../opt/homebrew/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://javascript-action/external node-commonjs \"fs\"","../webpack://javascript-action/webpack/bootstrap","../webpack://javascript-action/webpack/runtime/compat","../webpack://javascript-action/./index.js"],"sourcesContent":[null,"module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core');\nconst fs = require('fs')\n\n// most @actions toolkit packages have async methods\nasync function run() {\n  try {\n    const gemfile = core.getInput('gemfile');\n    const allowlist = core.getInput('allowlist');\n\n    const gems = fs.readFile(gemfile, 'utf8', (err, data) => {\n      if (err) {\n        // TODO: Verify how if error in this scope bubbles up to the `try` block\n        console.error(err)\n        return\n      }\n\n      const regexp = RegExp(/gem [\"|']([^\"|']*)[\"|']/, 'g');\n      const array = [...data.matchAll(regexp)].map(innerArr => innerArr[1]);\n\n      return array\n    })\n\n    core.info(`List of gems from Gemfile: ${gems}`)\n\n    fs.readFile(allowlist, 'utf8', (err, data) => {\n      if (err) {\n        // TODO: Verify how if error in this scope bubbles up to the `try` block\n        console.error(err)\n        return\n      }\n\n      const obj = JSON.parse(data)\n      core.info(`Allowlist data:`)\n      obj.gems.map(gem => core.info(gem))\n    })\n\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\nrun();\n"],"names":[],"sourceRoot":""}